##########################################
##the code here is used to run simulation tests for 
##checking the model and methods. 
##1.testing whether the simulated data can be used to
##	detecting the nonZero interaction effects. ----it should
##2.checking for the heterscedasticity cases vs. homoscedasticity
##3.checking for validity of the modeling without control data
##4.all above first using the smaller number of genes---- to keep 
##	the memory usage low so as to using the R built-in linear 
##	function for testing
##
##	Oct 1st, 2016 Feng@BU
##----------------------------
## ==update===
## Dec 13, 2016 Feng
##   add code to do FDR so to see how it behave with FDR analysis
##			reasoning: why do this? Since don't know the prob of differential interaction
##
##########################################
library(ARPPA)
library(qvalue)
#install.packages("pROC")
library(pROC)
##first checking for homoscedastical dataset
setwd("E:\\feng\\LAB\\hg\\proteinArray_Masa\\ARPPA\\data\\EqualVar_NegativeCon")
nGene<-2000
nTreatment<-2   #number of different beta
sampleSize<-5 ##this is the number of repeats for each group
alpha.mean<-0  #variance for alpha prior
alpha.sigma<-3
beta.mean<-0
beta.sigma<-2   #variance for beta prior

gamma.sigma<-10  # the unscaled factor for gamma given gamma<=>0
prob.nonZero<-0.02
#priors for variance distribution
d0<-5
s0<-2


#this time of around, we need a fixed variance for the gaussian variance
epsilon.si<-2
#call it
set.seed(2004);
#simulate *****the equal variance and !!!!!!!negative control data
#E-equal variance; N-negative control
repeats<-100
for(i in c(1:repeats))
{
cat("doing ", i, "/",repeats," analyses....\n")
	dataExp_EN_List<-simulateExpression(nGene, nTreatment, sampleSize,
				control.negative=TRUE, control.isotype=FALSE,
				control.index=c(1),
				alpha.mean=alpha.mean, alpha.sigma=alpha.sigma,
				beta.mean=beta.mean, beta.sigma=beta.sigma,
				prob.nonZero=prob.nonZero, gamma.sigma=gamma.sigma,
				epsilon.si=epsilon.si #epsilon.d0=d0, epsilon.s0=s0
				)
#calculate the sample variance from the data
dataExp_EN<-dataExp_EN_List[[1]]
svList<-sampleVariance(dataExp_EN,nTreatment, sampleSize)
#reformat it into a vector
s2<-as.vector(as.matrix(svList[[1]]))
df<-as.vector(as.matrix(svList[[2]]))
r2<-sampleVariancePrior(s2,df)

#we have the data, what to do.
#reformat the data from data matrix to 
#dataframe for the linear regress
dExp_EN<-matrix2dframe(dataExp_EN, nTreatment, sampleSize);

#now do the linear regression with interaction 
lreg_EN<-lm(exp~gene*group, data=dExp_EN)
lregSm<-summary(lreg_EN)
lstToSave<-list("data"=dataExp_EN_List, "lregCoef"=lregSm$coefficients, "var.prior"=r2);
save(lstToSave, file=paste("result_",i,".RData",sep=""));
}

###############
set.seed(2005)
setwd("E:\\feng\\LAB\\hg\\proteinArray_Masa\\ARPPA\\data\\EqualVar_IsotypeCon")
for(j in c(2:repeats))
{
cat("doing ", j, "/",repeats," analyses....\n")
#simulate *****the equal variance and !!!!!!!isotype control data
#E-equal; I-isotype

dataExp_EI_List<-simulateExpression(nGene, nTreatment, sampleSize,
				control.negative=FALSE, control.isotype=TRUE,
				control.index=c(1),
				alpha.mean=alpha.mean, alpha.sigma=alpha.sigma,
				beta.mean=beta.mean, beta.sigma=beta.sigma,
				prob.nonZero=prob.nonZero, gamma.sigma=gamma.sigma,
				epsilon.si=epsilon.si #epsilon.d0=d0, epsilon.s0=s0
				)
dataExp_EI<-dataExp_EI_List[[1]]
#calculate the sample variance from the data
svList<-sampleVariance(dataExp_EI,nTreatment, sampleSize)
#reformat it into a vector
s2<-as.vector(as.matrix(svList[[1]]))
df<-as.vector(as.matrix(svList[[2]]))
r2<-sampleVariancePrior(s2,df)

#we have the data, what to do.
#reformat the data from data matrix to 
#dataframe for the linear regress
dExp_EI<-matrix2dframe(dataExp_EI, nTreatment, sampleSize);

#now do the linear regression with interaction 
lreg_EI<-lm(exp~gene*group, data=dExp_EI)
lregSm_EI<-summary(lreg_EI)
lstToSave_EI<-list("data"=dataExp_EI_List, "lregCoef"=lregSm_EI$coefficients, "var.prior"=r2);
save(lstToSave_EI, file=paste("result_",j,".RData",sep=""));
cat("Done!!\n")
}

#####################
set.seed(2006)
setwd("E:\\feng\\LAB\\hg\\proteinArray_Masa\\ARPPA\\data\\EqualVar_Uncontrol")
for(k in c(2:repeats))
{
cat("doing ", k, "/",repeats," analyses....\n")
#simulate *****the equal variance and !!!!!!!isotype control data
#E-equal; NC-NC

dataExp_ENC_List<-simulateExpression(nGene, nTreatment, sampleSize,
				control.negative=FALSE, control.isotype=FALSE,
				#control.index=c(1),
				alpha.mean=alpha.mean, alpha.sigma=alpha.sigma,
				beta.mean=beta.mean, beta.sigma=beta.sigma,
				prob.nonZero=prob.nonZero, gamma.sigma=gamma.sigma,
				epsilon.si=epsilon.si #epsilon.d0=d0, epsilon.s0=s0
				)
dataExp_ENC<-dataExp_ENC_List[[1]]
#calculate the sample variance from the data
svList<-sampleVariance(dataExp_ENC,nTreatment, sampleSize)
#reformat it into a vector
s2<-as.vector(as.matrix(svList[[1]]))
df<-as.vector(as.matrix(svList[[2]]))
r2<-sampleVariancePrior(s2,df)

#we have the data, what to do.
#reformat the data from data matrix to 
#dataframe for the linear regress
dExp_ENC<-matrix2dframe(dataExp_ENC, nTreatment, sampleSize);

#now do the linear regression with interaction 
lreg_ENC<-lm(exp~gene*group, data=dExp_ENC)
lregSm_ENC<-summary(lreg_ENC)
lstToSave_ENC<-list("data"=dataExp_ENC_List, "lregCoef"=lregSm_ENC$coefficients, "var.prior"=r2);
save(lstToSave_ENC, file=paste("result_",k,".RData",sep=""));
cat("Done!!\n")
}
#now summary the data first
aggregate(exp~gene*group, dExp_ENC, FUN=mean)

###dianostic plots
op<-par(mfrow=c(2,2))
plot(lreg_EN)
par(op)

#================analysis=======
###start doing the summary statistics of the repeated runs
#
#loading the data
repeats<-100
setwd("E:\\feng\\LAB\\hg\\proteinArray_Masa\\ARPPA\\data\\EqualVar_NegativeCon");
#setwd("~/Desktop/arppr/EqualVar_NegativeCon/")
i<-1
portions<-seq(0.000, 1.0, 0.001)
stats_df<-data.frame("portions"=portions);
stats_qval_tpr<-data.frame("cutoff"=portions)
stats_qval_fpr<-data.frame("cutoff"=portions)

stats_qval_tpr_ordT<-data.frame("cutoff"=portions)
stats_qval_fpr_ordT<-data.frame("cutoff"=portions)

roc.auc<-rep(0,repeats)
roc_ordT.auc<-rep(0,repeats)
for(i in c(1:repeats))
{
	
	cat("reading the ",i, "/", repeats," data sets.....\n")
	load(paste("result_", i,".RData",sep=""))
	cat("count the correct ones.....\n")
	#depending on which data,
	lstData<-lstToSave
	rm(lstToSave)
	
	#try to know which one is nonZero as the true values
	gammaTrue<-lstData$data$gamma
	gammaTrueIndex<-which(gammaTrue[,2]!=0)
		
	#now need to sort the p-value of the 
	#and pick top n genes to be the significant ones as the analysis results
	#
	lr_coe<-lstData$lregCoef
	lr_coe_names<-rownames(lr_coe)
	lr_coe_gamma_index<-which(grepl("gene\\d*:group2",lr_coe_names));
	lr_coe_int<-lr_coe[lr_coe_gamma_index,]
	lr_coe_int_names<-lr_coe_names[lr_coe_gamma_index];

	#sort the array according to the prob
	lr_coe_int_prob<-lr_coe_int[,"Pr(>|t|)"]
	lr_coe_int_sort_order<-order(lr_coe_int_prob) #NOTE:the names is one more than its index, eg. 811 is gene812:group2
	#lr_coe_int_sort<-lr_coe_int[lr_coe_int_sort_order,]
	lr_coe_int_prob_qvalue<-qvalue(lr_coe_int_prob[lr_coe_int_sort_order])$qvalue

	#now we have everything, just need to collect statistics
	p_correct<-portions;#initialize the vector
	p_correct_byQ<-portions;#initialize the vector
	p_fpr_byQ<-portions;
	
	p_correct_byQ_ordT<-portions;#initialize the vector
	p_fpr_byQ_ordT<-portions;
	
	roc_response<-rep(0, length(gammaTrue[,1]))
	roc_response[gammaTrueIndex]<-1
	roc_predict<-qvalue(lr_coe_int_prob)$qvalue
	roc.obj<-roc(roc_response[-1], roc_predict)
	roc.auc[i]<-roc.obj$auc
	
	#now we are doing -->ordinary t tests<--
	#get the data first
	dtExp<-lstData$data$exp
	prob_ordT<-rep(0,length(dtExp[,1]))
	#run t.test
	for(nn in c(1:length(dtExp[,1])))
	{
		prob_ordT[nn]<-t.test(dtExp[nn,c(1:sampleSize)],dtExp[nn,c((1+sampleSize):(sampleSize+sampleSize))])$p.value
	}
	prob_ordT_Q<-	tryCatch(
		qvalue(prob_ordT)$qvalue,
		error=function(c){
		cat("******ERROR in calling \"qvalue\"\n")
		cat("\t",c$message,"\n")
		cat("calling p.adjust instead\n")
		prob_ordT_Q<- p.adjust(prob_ordT, method="BH")		
		},
		warning = function(c) c$message,
		message = function(c) c$message
	)
	roc_ordT<-roc(roc_response, prob_ordT_Q)
	
	roc_ordT.auc[i]<-roc_ordT$auc
	j<-100
	for(j in c(1:length(portions)))
	{
		#for each portion, we need to check what is percentage to be correct
		numToPick<-floor(lstData$data$params[1]*portions[j])
		#picking from the order array
		genesToPick_byProb<-lr_coe_int_sort_order[c(1:numToPick)]+1 #see NOTE above, index is one more less than the name
		#now we got the genes, just need to check whether the genes so far are the TRUE ones
		numOfCorrect<-sum(is.element(genesToPick_byProb, gammaTrueIndex));
		p_correct[j]<-numOfCorrect/numToPick
		
		#now doing the q value, using the portion as the qvalue cutoff
		numToPick_byQ<-sum(lr_coe_int_prob_qvalue<=portions[j])
		
		genesToPick_byQ<-lr_coe_int_sort_order[c(1:numToPick_byQ)]+1
		#now we got the genes, just need to check whether the genes so far are the TRUE ones
		numOfCorrect_byQ<-sum(is.element(genesToPick_byQ, gammaTrueIndex));
		p_correct_byQ[j]<-numOfCorrect_byQ/floor(lstData$data$params[1]*lstData$data$params[3])
		p_fpr_byQ[j]<-(length(genesToPick_byQ)-numOfCorrect_byQ)/floor(lstData$data$params[1]*(1-lstData$data$params[3]))
		
		#now doing ordinary T tests<--------
		numToPick_byQ_ordT<-sum(prob_ordT_Q<=portions[j])
		prob_ordT_Q_sort<-order(prob_ordT_Q)
		geneToPick_byQ_OrdT<-prob_ordT_Q_sort[c(1:numToPick_byQ_ordT)]#this is different, there is +1 here!!!!!!!
		numOfCorrect_byQ_ordT<-sum(is.element(geneToPick_byQ_OrdT, gammaTrueIndex));
		
		p_correct_byQ_ordT[j]<-numOfCorrect_byQ_ordT/floor(lstData$data$params[1]*lstData$data$params[3])
		p_fpr_byQ_ordT[j]<-(length(geneToPick_byQ_OrdT)-numOfCorrect_byQ_ordT)/floor(lstData$data$params[1]*(1-lstData$data$params[3]))
	}
	stats_df[,paste("repeat_",i, sep="")]<-p_correct;
	stats_qval_tpr[,paste("repeat_",i,sep="")]<-p_correct_byQ;
	stats_qval_fpr[,paste("repeat_",i,sep="")]<-p_fpr_byQ;
	
	stats_qval_tpr_ordT[,paste("repeat_",i,sep="")]<-p_correct_byQ_ordT;
	stats_qval_fpr_ordT[,paste("repeat_",i,sep="")]<-p_fpr_byQ_ordT;
}
#statistics with the stats_df array
mean_correct<-portions
max_correct<-portions
min_correct<-portions
std_correct<-portions
m_stats_df<-as.matrix(stats_df)
for(k in c(1:length(portions)))
{
	mean_correct[k]<-mean(m_stats_df[k,c(-1)])
	max_correct[k]<-max(m_stats_df[k,c(-1)])
	min_correct[k]<-min(m_stats_df[k,c(-1)])
	std_correct[k]<-sqrt(var(m_stats_df[k,c(-1)]))
}

stats_df[,"mean"]<-mean_correct
stats_df[,"min"]<-min_correct
stats_df[,"max"]<-max_correct
stats_df[,"std"]<-std_correct

plot(c(0.001,0.51),c(0.02, 1.1), type="n", main="true discovery rate for protein selection", 
	xlab="portion of protein selected", ylab="portion of true discovery", log="x")
lines(stats_df[,1], stats_df[,"mean"], col=1, lty=1, lwd=2)
lines(stats_df[,1], stats_df[,"min"], col="grey", lty=2, lwd=1)
lines(stats_df[,1], stats_df[,"max"], col="grey", lty=2, lwd=1)
lines(c(prob.nonZero, prob.nonZero), c(0,1.2), col=2, lty=3)

#show stats
stats_df[c(1:30),c("portions", "mean", "min", "max", "std")]
############adding code to do FDR

#statistics with the roc array
mean_tpr<-portions
mean_fpr<-portions
for(k in c(1:length(portions)))
{
	mean_tpr[k]<-mean(as.matrix(stats_qval_tpr[k,c(-1)]))
	mean_fpr[k]<-mean(as.matrix(stats_qval_fpr[k,c(-1)]))
}


plot(c(0,1), c(0,1),type="n", main="ROC", ylab="True Positive Rate", xlab="False Positive Rate")
for(ii in c(1:repeats))
{
	lines( stats_qval_fpr[,ii+1],stats_qval_tpr[,ii+1],col="light blue", lty="dotted")
}
lines(mean_fpr,mean_tpr, col="red",lty=2,lwd=2)
legend(0.7,0.2,c("mean ROC"),col=c("red"), lty=c(2),lwd=c(2))
text(0.7,0.3,labels=paste("AUC:",mean(roc.auc)))

#statistics with the roc array for ---->ordT
mean_tpr_ordT<-portions
mean_fpr_ordT<-portions
for(k in c(1:length(portions)))
{
	mean_tpr_ordT[k]<-mean(as.matrix(stats_qval_tpr_ordT[k,c(-1)]))
	mean_fpr_ordT[k]<-mean(as.matrix(stats_qval_fpr_ordT[k,c(-1)]))
}


plot(c(0,1), c(0,1),type="n", main="ROC", ylab="True Positive Rate", xlab="False Positive Rate")
for(ii in c(1:repeats))
{
	lines( stats_qval_fpr_ordT[,ii+1],stats_qval_tpr_ordT[,ii+1],col="light blue", lty="dotted")
}
lines(mean_fpr_ordT,mean_tpr_ordT, col="green",lty=2,lwd=2)
legend(0.7,0.2,c("mean ROC"),col=c("red"), lty=c(2),lwd=c(2))
text(0.7,0.3,labels=paste("AUC:",mean(roc_ordT.auc)))

########=================Isotype control data analysis
#loading the data
repeats<-100
setwd("E:\\feng\\LAB\\hg\\proteinArray_Masa\\ARPPA\\data\\EqualVar_IsotypeCon");
#setwd("~/Desktop/arppr/EqualVar_NegativeCon/")
i<-1
portions<-seq(0.00, 1.0, 0.001)
stats_df<-data.frame("portions"=portions);
stats_qval_tpr<-data.frame("cutoff"=portions)
stats_qval_fpr<-data.frame("cutoff"=portions)
roc.auc<-rep(0,repeats)
for(i in c(1:repeats))
{
	cat("reading the ",i, "/", repeats," data sets.....\n")
	load(paste("result_", i,".RData",sep=""))
	cat("count the correct ones.....\n")
	#depending on which data,
	lstData<-lstToSave_EI
	rm(lstToSave_EI)
	
	#try to know which one is nonZero as the true values
	gammaTrue<-lstData$data$gamma
	gammaTrueIndex<-which(gammaTrue[,2]!=0)
	
	#now need to sort the p-value of the 
	#and pick top n genes to be the significant ones as the analysis results
	#
	lr_coe<-lstData$lregCoef
	lr_coe_names<-rownames(lr_coe)
	lr_coe_gamma_index<-which(grepl("gene\\d*:group2",lr_coe_names));
	lr_coe_int<-lr_coe[lr_coe_gamma_index,]
	lr_coe_int_names<-lr_coe_names[lr_coe_gamma_index];

	#sort the array according to the prob
	lr_coe_int_prob<-lr_coe_int[,"Pr(>|t|)"]
	lr_coe_int_sort_order<-order(lr_coe_int_prob) #NOTE:the names is one more than its index, eg. 811 is gene812:group2
	#lr_coe_int_sort<-lr_coe_int[lr_coe_int_sort_order,]
	lr_coe_int_prob_qvalue<-qvalue(lr_coe_int_prob[lr_coe_int_sort_order])$qvalue


	#now we have everything, just need to collect statistics
	p_correct<-portions;#initialize the vector
	p_correct_byQ<-portions;#initialize the vector
	p_fpr_byQ<-portions;
	
	roc_response<-rep(0, length(gammaTrue[,1]))
	roc_response[gammaTrueIndex]<-1
	roc_predict<-qvalue(lr_coe_int_prob)$qvalue
	roc.obj<-roc(roc_response[-1], roc_predict)
	roc.auc[i]<-roc.obj$auc

	for(j in c(1:length(portions)))
	{
		#for each portion, we need to check what is percentage to be correct
		numToPick<-floor(lstData$data$params[1]*portions[j])
		#picking from the order array
		genesToPick_byProb<-lr_coe_int_sort_order[c(1:numToPick)]+1

		#now we got the genes, just need to check whether the genes so far are the TRUE ones
		numOfCorrect<-sum(is.element(genesToPick_byProb, gammaTrueIndex));
		p_correct[j]<-numOfCorrect/numToPick
		
		#now doing the q value, using the portion as the qvalue cutoff
		numToPick_byQ<-sum(lr_coe_int_prob_qvalue<=portions[j])
		
		genesToPick_byQ<-lr_coe_int_sort_order[c(1:numToPick_byQ)]+1
		#now we got the genes, just need to check whether the genes so far are the TRUE ones
		numOfCorrect_byQ<-sum(is.element(genesToPick_byQ, gammaTrueIndex));
		p_correct_byQ[j]<-numOfCorrect_byQ/floor(lstData$data$params[1]*lstData$data$params[3])
		p_fpr_byQ[j]<-(length(genesToPick_byQ)-numOfCorrect_byQ)/floor(lstData$data$params[1]*(1-lstData$data$params[3]))
	}
	stats_df[,paste("repeat_",i,sep="")]<-p_correct;
	stats_qval_tpr[,paste("repeat_",i,sep="")]<-p_correct_byQ;
	stats_qval_fpr[,paste("repeat_",i,sep="")]<-p_fpr_byQ;
}
#statistics with the stats_df array
mean_correct<-portions
max_correct<-portions
min_correct<-portions
std_correct<-portions
m_stats_df<-as.matrix(stats_df)
for(k in c(1:length(portions)))
{
	mean_correct[k]<-mean(m_stats_df[k,c(-1)])
	max_correct[k]<-max(m_stats_df[k,c(-1)])
	min_correct[k]<-min(m_stats_df[k,c(-1)])
	std_correct[k]<-sqrt(var(m_stats_df[k,c(-1)]))
}

stats_df[,"mean"]<-mean_correct
stats_df[,"min"]<-min_correct
stats_df[,"max"]<-max_correct
stats_df[,"std"]<-std_correct

plot(c(0.001,0.51),c(0.02, 1.1), type="n", main="true discovery rate for protein selection", 
	xlab="portion of protein selected", ylab="portion of true discovery", log="xy")
lines(stats_df[,1], stats_df[,"mean"], col=1, lty=1, lwd=2)
lines(stats_df[,1], stats_df[,"min"], col="grey", lty=2, lwd=1)
lines(stats_df[,1], stats_df[,"max"], col="grey", lty=2, lwd=1)
lines(c(prob.nonZeero, prob.nonZero), c(0.02,1.2), col=2, lty=3)

#show stats
stats_df[c(1:30),c("portions", "mean", "min", "max", "std")]

############adding code to do FDR
#statistics with the roc array
mean_tpr<-portions
mean_fpr<-portions
for(k in c(1:length(portions)))
{
	mean_tpr[k]<-mean(as.matrix(stats_qval_tpr[k,c(-1)]))
	mean_fpr[k]<-mean(as.matrix(stats_qval_fpr[k,c(-1)]))
}


plot(c(0,1), c(0,1),type="n", main="ROC", ylab="True Positive Rate", xlab="False Positive Rate")
for(ii in c(1:repeats))
{
	lines( stats_qval_fpr[,ii+1],stats_qval_tpr[,ii+1],col="light blue", lty="dotted")
}
lines(mean_fpr,mean_tpr, col="red",lty=2,lwd=2)
legend(0.7,0.2,c("mean ROC"),col=c("red"), lty=c(2),lwd=c(2))
text(0.7,0.3,labels=paste("AUC:",mean(roc.auc)))

 
 
 #######====================No control++++++++++

#loading the data
repeats<-100
setwd("E:\\feng\\LAB\\hg\\proteinArray_Masa\\ARPPA\\data\\EqualVar_UnControl");
#setwd("~/Desktop/arppr/EqualVar_NegativeCon/")
i<-1

portions<-seq(0.00, 1.0, 0.001)
stats_df<-data.frame("portions"=portions);
stats_qval_tpr<-data.frame("cutoff"=portions)
stats_qval_fpr<-data.frame("cutoff"=portions)
roc.auc<-rep(0,repeats)

for(i in c(1:repeats))
{
	cat("reading the ",i, "/", repeats," data sets.....\n")
	load(paste("result_", i,".RData",sep=""))
	cat("count the correct ones.....\n")
	#depending on which data,
	lstData<-lstToSave_ENC
	rm(lstToSave_ENC)
	
	#try to know which one is nonZero as the true values
	gammaTrue<-lstData$data$gamma
	gammaTrueIndex<-which(gammaTrue[,2]!=0)
	
	#now need to sort the p-value of the 
	#and pick top n genes to be the significant ones as the analysis results
	#
	lr_coe<-lstData$lregCoef
	lr_coe_names<-rownames(lr_coe)
	lr_coe_gamma_index<-which(grepl("gene\\d*:group2",lr_coe_names));
	lr_coe_int<-lr_coe[lr_coe_gamma_index,]
	lr_coe_int_names<-lr_coe_names[lr_coe_gamma_index];

	#sort the array according to the prob
	lr_coe_int_prob<-lr_coe_int[,"Pr(>|t|)"]
	lr_coe_int_sort_order<-order(lr_coe_int_prob) #NOTE:the names is one more than its index, eg. 811 is gene812:group2
	#lr_coe_int_sort<-lr_coe_int[lr_coe_int_sort_order,]
	lr_coe_int_prob_qvalue<-qvalue(lr_coe_int_prob[lr_coe_int_sort_order])$qvalue


	#now we have everything, just need to collect statistics
	p_correct<-portions;#initialize the vector
	p_correct_byQ<-portions;#initialize the vector
	p_fpr_byQ<-portions;
	
	roc_response<-rep(0, length(gammaTrue[,1]))
	roc_response[gammaTrueIndex]<-1
	roc_predict<-qvalue(lr_coe_int_prob)$qvalue
	roc.obj<-roc(roc_response[-1], roc_predict)
	roc.auc[i]<-roc.obj$auc

	for(j in c(1:length(portions)))
	{
		#for each portion, we need to check what is percentage to be correct
		numToPick<-floor(lstData$data$params[1]*portions[j])
		#picking from the order array
		genesToPick_byProb<-lr_coe_int_sort_order[c(1:numToPick)]+1

		#now we got the genes, just need to check whether the genes so far are the TRUE ones
		numOfCorrect<-sum(is.element(genesToPick_byProb, gammaTrueIndex));
		p_correct[j]<-numOfCorrect/numToPick
		
		#now doing the q value, using the portion as the qvalue cutoff
		numToPick_byQ<-sum(lr_coe_int_prob_qvalue<=portions[j])
		
		genesToPick_byQ<-lr_coe_int_sort_order[c(1:numToPick_byQ)]+1
		#now we got the genes, just need to check whether the genes so far are the TRUE ones
		numOfCorrect_byQ<-sum(is.element(genesToPick_byQ, gammaTrueIndex));
		p_correct_byQ[j]<-numOfCorrect_byQ/floor(lstData$data$params[1]*lstData$data$params[3])
		p_fpr_byQ[j]<-(length(genesToPick_byQ)-numOfCorrect_byQ)/floor(lstData$data$params[1]*(1-lstData$data$params[3]))
	}

	stats_df[,paste("repeat_",i,sep="")]<-p_correct;
	stats_qval_tpr[,paste("repeat_",i,sep="")]<-p_correct_byQ;
	stats_qval_fpr[,paste("repeat_",i,sep="")]<-p_fpr_byQ;
}
#statistics with the stats_df array
mean_correct<-portions
max_correct<-portions
min_correct<-portions
std_correct<-portions
m_stats_df<-as.matrix(stats_df)
for(k in c(1:length(portions)))
{
	mean_correct[k]<-mean(m_stats_df[k,c(-1)])
	max_correct[k]<-max(m_stats_df[k,c(-1)])
	min_correct[k]<-min(m_stats_df[k,c(-1)])
	std_correct[k]<-sqrt(var(m_stats_df[k,c(-1)]))
}

stats_df[,"mean"]<-mean_correct
stats_df[,"min"]<-min_correct
stats_df[,"max"]<-max_correct
stats_df[,"std"]<-std_correct

plot(c(0.001,0.51),c(0.02, 1.1), type="n", main="true discovery rate for protein selection", 
	xlab="portion of protein selected", ylab="portion of true discovery", log="xy")
lines(stats_df[,1], stats_df[,"mean"], col=1, lty=1, lwd=2)
lines(stats_df[,1], stats_df[,"min"], col="grey", lty=2, lwd=1)
lines(stats_df[,1], stats_df[,"max"], col="grey", lty=2, lwd=1)
lines(c(prob.nonZero, prob.nonZero), c(0.02,1.2), col=2, lty=3)

#show stats
stats_df[c(1:30),c("portions", "mean", "min", "max", "std")]

#add FDR code
#statistics with the roc array
mean_tpr<-portions
mean_fpr<-portions
for(k in c(1:length(portions)))
{
	mean_tpr[k]<-mean(as.matrix(stats_qval_tpr[k,c(-1)]))
	mean_fpr[k]<-mean(as.matrix(stats_qval_fpr[k,c(-1)]))
}


plot(c(0,1), c(0,1),type="n", main="ROC", ylab="True Positive Rate", xlab="False Positive Rate")
for(ii in c(1:repeats))
{
	lines( stats_qval_fpr[,ii+1],stats_qval_tpr[,ii+1],col="light blue", lty="dotted")
}
lines(mean_fpr,mean_tpr, col="red",lty=2,lwd=2)
legend(0.7,0.2,c("mean ROC"),col=c("red"), lty=c(2),lwd=c(2))
text(0.7,0.3,labels=paste("AUC:",mean(roc.auc)))



###now from here, we add code to do FDR using q values as well as p.adj (BH or FDR)

 
 ####------------------------------------------------------------------------------------
 #####the following part is also for the ---no control---
 ###this is special for no control cases, because in this case
 ###the differential ones could possibly from both groups
 ###if we only count one group, this will lower the true positive rate
 ###here we need to check both groups for the true positive ones
 
 #loading the data
repeats<-100
setwd("E:\\feng\\LAB\\hg\\proteinArray_Masa\\ARPPA\\data\\EqualVar_UnControl");
#setwd("~/Desktop/arppr/EqualVar_NegativeCon/")
i<-1

portions<-seq(0.00, 1.0, 0.001)
stats_df<-data.frame("portions"=portions);
stats_qval_tpr<-data.frame("cutoff"=portions)
stats_qval_fpr<-data.frame("cutoff"=portions)
roc.auc<-rep(0,repeats)

for(i in c(1:repeats))
{
	cat("reading the ",i, "/", repeats," data sets.....\n")
	load(paste("result_", i,".RData",sep=""))
	cat("count the correct ones.....\n")
	#depending on which data,
	lstData<-lstToSave_ENC
	rm(lstToSave_ENC)
	
	#try to know which one is nonZero as the true values
	gammaTrue<-lstData$data$gamma
	gammaTrueIndex<-which(gammaTrue[,2]!=0|gammaTrue[,1]!=0)
	#gammaTrueIndex1<-which()
	
	#now need to sort the p-value of the 
	#and pick top n genes to be the significant ones as the analysis results
	#
	lr_coe<-lstData$lregCoef
	lr_coe_names<-rownames(lr_coe)
	lr_coe_gamma_index<-which(grepl("gene\\d*:group2",lr_coe_names));
	lr_coe_int<-lr_coe[lr_coe_gamma_index,] #this is the table holding the datas for all the interaction coefficients
	lr_coe_int_names<-lr_coe_names[lr_coe_gamma_index];

	#sort the array according to the prob
	lr_coe_int_prob<-lr_coe_int[,"Pr(>|t|)"]
	lr_coe_int_sort_order<-order(lr_coe_int_prob) #NOTE:the names is one more than its index, eg. 811 is gene812:group2
	#lr_coe_int_sort<-lr_coe_int[lr_coe_int_sort_order,]
	lr_coe_int_prob_qvalue<-qvalue(lr_coe_int_prob[lr_coe_int_sort_order])$qvalue


	#now we have everything, just need to collect statistics
	p_correct<-portions;#initialize the vector
	p_correct_byQ<-portions;#initialize the vector
	p_fpr_byQ<-portions;
	
	roc_response<-rep(0, length(gammaTrue[,1]))
	roc_response[gammaTrueIndex]<-1
	roc_predict<-qvalue(lr_coe_int_prob)$qvalue
	roc.obj<-roc(roc_response[-1], roc_predict)
	roc.auc[i]<-roc.obj$auc

	for(j in c(1:length(portions)))
	{
		#for each portion, we need to check what is percentage to be correct
		numToPick<-floor(lstData$data$params[1]*portions[j]*2)  #multiply by 2 here, because we are accounting for the facts that for bother treatment group
																#we are select top portions of genes, which means double the number of selected genes.
		#picking from the order array
		genesToPick_byProb<-lr_coe_int_sort_order[c(1:numToPick)]+1

		#now we got the genes, just need to check whether the genes so far are the TRUE ones
		numOfCorrect<-sum(is.element(genesToPick_byProb, gammaTrueIndex));
		#numOfCorrect2<-sum(is.element(genesToPick, gammaTrueIndex2));
		p_correct[j]<-(numOfCorrect)/numToPick#(numOfCorrect1+numOfCorrect2)/numToPick
		
		
		#now doing the q value, using the portion as the qvalue cutoff
		numToPick_byQ<-sum(lr_coe_int_prob_qvalue<=portions[j])
		
		genesToPick_byQ<-lr_coe_int_sort_order[c(1:numToPick_byQ)]+1
		#now we got the genes, just need to check whether the genes so far are the TRUE ones
		numOfCorrect_byQ<-sum(is.element(genesToPick_byQ, gammaTrueIndex));
		p_correct_byQ[j]<-numOfCorrect_byQ/floor(lstData$data$params[1]*lstData$data$params[3]*2)
		p_fpr_byQ[j]<-(length(genesToPick_byQ)-numOfCorrect_byQ)/floor(lstData$data$params[1]*(1-lstData$data$params[3]*2))
	}

	stats_df[,paste("repeat_",i,sep="")]<-p_correct;
	stats_qval_tpr[,paste("repeat_",i,sep="")]<-p_correct_byQ;
	stats_qval_fpr[,paste("repeat_",i,sep="")]<-p_fpr_byQ;
}
#statistics with the stats_df array
mean_correct<-portions
max_correct<-portions
min_correct<-portions
std_correct<-portions
m_stats_df<-as.matrix(stats_df)
for(k in c(1:length(portions)))
{
	mean_correct[k]<-mean(m_stats_df[k,c(-1)])
	max_correct[k]<-max(m_stats_df[k,c(-1)])
	min_correct[k]<-min(m_stats_df[k,c(-1)])
	std_correct[k]<-sqrt(var(m_stats_df[k,c(-1)]))
}

stats_df[,"mean"]<-mean_correct
stats_df[,"min"]<-min_correct
stats_df[,"max"]<-max_correct
stats_df[,"std"]<-std_correct

plot(c(0.001,0.51),c(0.02, 1.1), type="n", main="true discovery rate for protein selection", 
	xlab="portion of protein selected", ylab="portion of true discovery", log="xy")
lines(stats_df[,1], stats_df[,"mean"], col=1, lty=1, lwd=2)
lines(stats_df[,1], stats_df[,"min"], col="grey", lty=2, lwd=1)
lines(stats_df[,1], stats_df[,"max"], col="grey", lty=2, lwd=1)
lines(c(0.01, 0.01), c(0.02,1.2), col=2, lty=3)

#show stats
stats_df[c(1:30),c("portions", "mean", "min", "max", "std")]

#add FDR code
#statistics with the roc array
mean_tpr<-portions
mean_fpr<-portions
for(k in c(1:length(portions)))
{
	mean_tpr[k]<-mean(as.matrix(stats_qval_tpr[k,c(-1)]))
	mean_fpr[k]<-mean(as.matrix(stats_qval_fpr[k,c(-1)]))
}


plot(c(0,1), c(0,1),type="n", main="ROC", ylab="True Positive Rate", xlab="False Positive Rate")
for(ii in c(1:repeats))
{
	lines( stats_qval_fpr[,ii+1],stats_qval_tpr[,ii+1],col="light blue", lty="dotted")
}
lines(mean_fpr,mean_tpr, col="red",lty=2,lwd=2)
legend(0.7,0.2,c("mean ROC"),col=c("red"), lty=c(2),lwd=c(2))
text(0.7,0.3,labels=paste("AUC:",mean(roc.auc)))

